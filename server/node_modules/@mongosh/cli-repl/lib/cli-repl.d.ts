/// <reference types="node" />
import type { AutoEncryptionOptions } from '@mongosh/service-provider-core';
import { NodeDriverServiceProvider } from '@mongosh/service-provider-node-driver';
import type { CliOptions, DevtoolsConnectOptions } from '@mongosh/arg-parser';
import type { Analytics as SegmentAnalytics } from '@segment/analytics-node';
import ConnectionString from 'mongodb-connection-string-url';
import type { Readable, Writable } from 'stream';
import { getGlibcVersion } from './build-info';
import type { StyleDefinition } from './clr';
import type { ShellHomePaths } from './config-directory';
import { ConfigManager, ShellHomeDirectory } from './config-directory';
import type { CryptLibraryPathResult } from './crypt-library-paths';
import type { MongoLogWriter } from 'mongodb-log-writer';
import { MongoLogManager } from 'mongodb-log-writer';
import type { MongoshNodeReplOptions, MongoshIOProvider } from './mongosh-repl';
import MongoshNodeRepl from './mongosh-repl';
import { ToggleableAnalytics } from '@mongosh/logging';
import type { MongoshBus } from '@mongosh/types';
import { CliUserConfig } from '@mongosh/types';
import { UpdateNotificationManager } from './update-notification-manager';
import type { AgentWithInitialize, DevtoolsProxyOptions } from '@mongodb-js/devtools-proxy-support';
type AnalyticsOptions = {
    host?: string;
    apiKey?: string;
    alwaysEnable?: boolean;
};
export type CliReplOptions = {
    shellCliOptions: CliOptions;
    getCryptLibraryPaths?: (bus: MongoshBus) => Promise<CryptLibraryPathResult>;
    input: Readable;
    output: Writable;
    promptOutput?: Writable;
    shellHomePaths: ShellHomePaths;
    globalConfigPaths?: string[];
    onExit: (code?: number) => never;
    analyticsOptions?: AnalyticsOptions;
} & Pick<MongoshNodeReplOptions, 'nodeReplOptions'>;
type CliUserConfigOnDisk = Partial<CliUserConfig> & Pick<CliUserConfig, 'enableTelemetry' | 'userId' | 'telemetryAnonymousId'>;
export declare class CliRepl implements MongoshIOProvider {
    mongoshRepl: MongoshNodeRepl;
    bus: MongoshBus;
    cliOptions: Readonly<CliOptions>;
    getCryptLibraryPaths?: (bus: MongoshBus) => Promise<CryptLibraryPathResult>;
    cachedCryptLibraryPath?: Promise<CryptLibraryPathResult>;
    shellHomeDirectory: ShellHomeDirectory;
    configDirectory: ConfigManager<CliUserConfigOnDisk>;
    config: CliUserConfigOnDisk;
    globalConfig: Partial<CliUserConfig> | null;
    globalConfigPaths: string[];
    logManager: MongoLogManager;
    logWriter?: MongoLogWriter;
    input: Readable;
    output: Writable;
    promptOutput: Writable;
    analyticsOptions?: AnalyticsOptions;
    segmentAnalytics?: SegmentAnalytics;
    toggleableAnalytics: ToggleableAnalytics;
    warnedAboutInaccessibleFiles: boolean;
    onExit: (code?: number) => Promise<never>;
    closingPromise?: Promise<void>;
    isContainerizedEnvironment: boolean;
    hasOnDiskTelemetryId: boolean;
    proxyOptions: DevtoolsProxyOptions;
    agent: AgentWithInitialize | undefined;
    updateNotificationManager: UpdateNotificationManager;
    fetchMongoshUpdateUrlRegardlessOfCiEnvironment: boolean;
    cachedGlibcVersion: null | string | undefined;
    constructor(options: CliReplOptions);
    getIsContainerizedEnvironment(): Promise<boolean>;
    get forceDisableTelemetry(): boolean;
    start(driverUri: string, driverOptions: DevtoolsConnectOptions): Promise<void>;
    private static getFileAndEvalInfo;
    injectReplFunctions(): void;
    setupAnalytics(): Promise<void>;
    setTelemetryEnabled(enabled: boolean): void;
    loadCommandLineFilesAndEval(files: string[], evalScripts: string[]): Promise<number>;
    loadRcFiles(): Promise<void>;
    loadGlobalConfigFile(): Promise<Partial<CliUserConfig>>;
    warnAboutInaccessibleFile(err: Error, path?: string): void;
    connect(driverUri: string, driverOptions: DevtoolsConnectOptions): Promise<NodeDriverServiceProvider>;
    getHistoryFilePath(): string;
    getConfig<K extends keyof CliUserConfig>(key: K): Promise<CliUserConfig[K]>;
    setConfig<K extends keyof CliUserConfig>(key: K, value: CliUserConfig[K]): Promise<'success'>;
    listConfigOptions(): string[];
    verifyNodeVersion(): Promise<void>;
    getGlibcVersion: typeof getGlibcVersion;
    verifyPlatformSupport(): void;
    isPasswordMissingURI(cs: ConnectionString): boolean;
    isTlsKeyFilePasswordMissingURI(searchParams: ReturnType<typeof ConnectionString.prototype.typedSearchParams<DevtoolsConnectOptions>>): Promise<boolean>;
    ensurePasswordFieldIsPresentInAuth(driverOptions: DevtoolsConnectOptions): void;
    requirePassword(passwordPrompt?: string): Promise<string>;
    private _fatalError;
    close(): Promise<void>;
    exit(code?: number): Promise<never>;
    readFileUTF8(filename: string): Promise<{
        contents: string;
        absolutePath: string;
    }>;
    clr(text: string, style: StyleDefinition): string;
    getCryptLibraryOptions(): Promise<AutoEncryptionOptions['extraOptions']>;
    bugReportErrorMessageInfo(): string;
    getLoggedEnvironmentVariables(): Record<string, string | undefined>;
    prepareOIDCOptions(driverUri: string, driverOptionsIn: Readonly<DevtoolsConnectOptions>): Promise<DevtoolsConnectOptions>;
    fetchMongoshUpdateUrl(): Promise<void>;
    getMoreRecentMongoshVersion(): Promise<string | null>;
    private setupOIDCTokenDumpListener;
}
export {};
