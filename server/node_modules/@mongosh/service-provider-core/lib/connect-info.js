"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_build_info_1 = __importDefault(require("mongodb-build-info"));
function getHostInformation(host) {
    if (!host) {
        return {
            is_localhost: false,
            is_do_url: false,
            is_atlas_url: false,
        };
    }
    if (mongodb_build_info_1.default.isLocalhost(host)) {
        return {
            is_localhost: true,
            is_do_url: false,
            is_atlas_url: false,
        };
    }
    if (mongodb_build_info_1.default.isDigitalOcean(host)) {
        return {
            is_localhost: false,
            is_do_url: true,
            is_atlas_url: false,
        };
    }
    return {
        is_localhost: false,
        is_do_url: false,
        is_atlas_url: mongodb_build_info_1.default.isAtlas(host),
    };
}
function getConnectExtraInfo({ connectionString, buildInfo, atlasVersion, resolvedHostname, isLocalAtlas, }) {
    var _a, _b, _c;
    const auth_type = (_a = connectionString === null || connectionString === void 0 ? void 0 : connectionString.searchParams.get('authMechanism')) !== null && _a !== void 0 ? _a : undefined;
    const uri = (_b = connectionString === null || connectionString === void 0 ? void 0 : connectionString.toString()) !== null && _b !== void 0 ? _b : '';
    buildInfo !== null && buildInfo !== void 0 ? buildInfo : (buildInfo = {});
    const { isGenuine: is_genuine, serverName: non_genuine_server_name } = mongodb_build_info_1.default.getGenuineMongoDB(uri);
    const { isDataLake: is_data_federation, dlVersion: dl_version } = mongodb_build_info_1.default.getDataLake(buildInfo);
    const { serverOs: server_os, serverArch: server_arch } = mongodb_build_info_1.default.getBuildEnv(buildInfo);
    const isAtlas = !!(atlasVersion === null || atlasVersion === void 0 ? void 0 : atlasVersion.atlasVersion) || mongodb_build_info_1.default.isAtlas(uri);
    return {
        ...getHostInformation(resolvedHostname || uri),
        is_atlas: isAtlas,
        server_version: buildInfo.version,
        node_version: process.version,
        server_os,
        uri,
        server_arch,
        is_enterprise: mongodb_build_info_1.default.isEnterprise(buildInfo),
        auth_type,
        is_data_federation,
        is_stream: mongodb_build_info_1.default.isAtlasStream(uri),
        dl_version,
        atlas_version: (_c = atlasVersion === null || atlasVersion === void 0 ? void 0 : atlasVersion.atlasVersion) !== null && _c !== void 0 ? _c : null,
        is_genuine,
        non_genuine_server_name,
        is_local_atlas: isLocalAtlas,
    };
}
exports.default = getConnectExtraInfo;
//# sourceMappingURL=connect-info.js.map