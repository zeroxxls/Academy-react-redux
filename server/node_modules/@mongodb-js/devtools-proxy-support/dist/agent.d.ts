import type { Agent as HTTPSAgent } from 'https';
import type { DevtoolsProxyOptions } from './proxy-options';
import type { ClientRequest } from 'http';
import type { TcpNetConnectOpts } from 'net';
import type { ConnectionOptions } from 'tls';
import type { Duplex } from 'stream';
import type { ProxyLogEmitter } from './logging';
import { EventEmitter } from 'events';
export type AgentWithInitialize = HTTPSAgent & {
    initialize?(): Promise<void>;
    logger?: ProxyLogEmitter;
    readonly proxyOptions?: Readonly<DevtoolsProxyOptions>;
    createSocket(req: ClientRequest, options: TcpNetConnectOpts | ConnectionOptions, cb: (err: Error | null, s?: Duplex) => void): void;
} & Partial<EventEmitter>;
export declare function createAgent(proxyOptions: DevtoolsProxyOptions): AgentWithInitialize;
export declare function useOrCreateAgent(proxyOptions: DevtoolsProxyOptions | AgentWithInitialize, target?: string, useTargetRegardlessOfExistingAgent?: boolean): AgentWithInitialize | undefined;
//# sourceMappingURL=agent.d.ts.map