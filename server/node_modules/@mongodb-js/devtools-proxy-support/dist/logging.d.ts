interface BaseSocks5RequestMetadata {
    srcAddr: string;
    srcPort: number;
    dstAddr: string;
    dstPort: number;
}
export interface ProxyEventMap {
    'socks5:authentication-complete': (ev: {
        success: boolean;
    }) => void;
    'socks5:skip-auth-setup': () => void;
    'socks5:start-listening': (ev: {
        proxyHost: string;
        proxyPort: number;
    }) => void;
    'socks5:forwarding-error': (ev: {
        error: string;
    } & Partial<BaseSocks5RequestMetadata>) => void;
    'socks5:agent-initialized': () => void;
    'socks5:closing-tunnel': () => void;
    'socks5:got-forwarding-request': (ev: BaseSocks5RequestMetadata) => void;
    'socks5:accepted-forwarding-request': (ev: BaseSocks5RequestMetadata) => void;
    'socks5:failed-forwarding-request': (ev: {
        error: string;
    } & Partial<BaseSocks5RequestMetadata>) => void;
    'socks5:forwarded-socket-closed': (ev: BaseSocks5RequestMetadata) => void;
    'ssh:client-closed': () => void;
    'ssh:establishing-conection': (ev: {
        host: string | undefined;
        port: number | undefined;
        password: boolean;
        passphrase: boolean;
        privateKey: boolean;
    }) => void;
    'ssh:failed-connection': (ev: {
        error: string;
    }) => void;
    'ssh:established-connection': () => void;
    'ssh:failed-forward': (ev: {
        error: string;
        host: string;
        retryableError: boolean;
        retriesLeft: number;
    }) => void;
}
export type ProxyEventArgs<K extends keyof ProxyEventMap> = ProxyEventMap[K] extends (...args: infer P) => any ? P : never;
export interface ProxyLogEmitter {
    on<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
    off?<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
    once<K extends keyof ProxyEventMap>(event: K, listener: ProxyEventMap[K]): this;
    emit<K extends keyof ProxyEventMap>(event: K, ...args: ProxyEventArgs<K>): unknown;
}
interface MongoLogWriter {
    info(c: string, id: unknown, ctx: string, msg: string, attr?: any): void;
    warn(c: string, id: unknown, ctx: string, msg: string, attr?: any): void;
    error(c: string, id: unknown, ctx: string, msg: string, attr?: any): void;
    mongoLogId(this: void, id: number): unknown;
}
export declare function hookLogger(emitter: ProxyLogEmitter, log: MongoLogWriter, logCtx: string): void;
export {};
//# sourceMappingURL=logging.d.ts.map