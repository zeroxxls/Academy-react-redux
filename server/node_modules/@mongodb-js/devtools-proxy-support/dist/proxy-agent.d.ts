import * as http from 'http';
import { LRUCache } from 'lru-cache';
import type { AgentConnectOpts } from 'agent-base';
import { Agent } from 'agent-base';
import type { PacProxyAgentOptions } from 'pac-proxy-agent';
import type { PacProxyAgent } from 'pac-proxy-agent';
import type { HttpProxyAgentOptions } from 'http-proxy-agent';
import type { HttpProxyAgent } from 'http-proxy-agent';
import type { HttpsProxyAgentOptions } from 'https-proxy-agent';
import type { HttpsProxyAgent } from 'https-proxy-agent';
import type { SocksProxyAgentOptions } from 'socks-proxy-agent';
import type { SocksProxyAgent } from 'socks-proxy-agent';
type ValidProtocol = typeof HttpProxyAgent.protocols[number] | typeof HttpsProxyAgent.protocols[number] | typeof SocksProxyAgent.protocols[number] | typeof PacProxyAgent.protocols[number];
type AgentConstructor = new (proxy: string, proxyAgentOptions?: ProxyAgentOptions) => Agent;
type GetProxyForUrlCallback = (url: string, req: http.ClientRequest) => string | Promise<string>;
export declare const proxies: {
    [P in ValidProtocol]: [
        () => Promise<AgentConstructor>,
        () => Promise<AgentConstructor>
    ];
};
export type ProxyAgentOptions = HttpProxyAgentOptions<''> & HttpsProxyAgentOptions<''> & SocksProxyAgentOptions & PacProxyAgentOptions<''> & {
    httpAgent?: http.Agent;
    httpsAgent?: http.Agent;
    getProxyForUrl: GetProxyForUrlCallback;
};
export declare class ProxyAgent extends Agent {
    cache: LRUCache<string, Agent, unknown>;
    connectOpts?: ProxyAgentOptions;
    httpAgent: http.Agent;
    httpsAgent: http.Agent;
    getProxyForUrl: GetProxyForUrlCallback;
    constructor(opts: ProxyAgentOptions);
    connect(req: http.ClientRequest, opts: AgentConnectOpts): Promise<http.Agent>;
    destroy(): void;
}
export {};
//# sourceMappingURL=proxy-agent.d.ts.map