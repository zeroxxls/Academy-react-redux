import type { ConnectionOptions } from 'tls';
import type { TunnelOptions } from './socks5';
import type { ClientRequest } from 'http';
export type DevtoolsProxyOptionsSecrets = string;
export interface DevtoolsProxyOptions {
    proxy?: string;
    noProxyHosts?: string;
    useEnvironmentVariableProxies?: boolean;
    sshOptions?: {
        identityKeyFile?: string;
        identityKeyPassphrase?: string;
    };
    ca?: ConnectionOptions['ca'];
    env?: Record<string, string | undefined>;
}
interface ElectronProxyConfig {
    mode?: 'direct' | 'auto_detect' | 'pac_script' | 'fixed_servers' | 'system';
    pacScript?: string;
    proxyRules?: string;
    proxyBypassRules?: string;
}
export declare function proxyConfForEnvVars(env: Record<string, string | undefined>): {
    map: Map<string, string>;
    noProxy: string;
};
export declare function proxyForUrl(proxyOptions: DevtoolsProxyOptions, target: string, req?: ClientRequest & {
    overrideProtocol?: string;
}): string;
export declare function translateToElectronProxyConfig(proxyOptions: DevtoolsProxyOptions): ElectronProxyConfig;
export declare function getSocks5OnlyProxyOptions(proxyOptions: DevtoolsProxyOptions, target?: string): TunnelOptions | undefined;
export declare function extractProxySecrets(proxyOptions: Readonly<DevtoolsProxyOptions>): {
    proxyOptions: DevtoolsProxyOptions;
    secrets: DevtoolsProxyOptionsSecrets;
};
export declare function mergeProxySecrets({ proxyOptions, secrets, }: {
    proxyOptions: Readonly<DevtoolsProxyOptions>;
    secrets: DevtoolsProxyOptionsSecrets;
}): DevtoolsProxyOptions;
export declare function redactUrl(urlOrString: URL | string): string;
export {};
//# sourceMappingURL=proxy-options.d.ts.map