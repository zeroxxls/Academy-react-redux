import type { AgentConnectOpts } from 'agent-base';
import { Agent as AgentBase } from 'agent-base';
import type { DevtoolsProxyOptions } from './proxy-options';
import type { AgentWithInitialize } from './agent';
import type { ClientRequest } from 'http';
import type { Duplex } from 'stream';
import type { ProxyLogEmitter } from './logging';
export declare class SSHAgent extends AgentBase implements AgentWithInitialize {
    logger: ProxyLogEmitter;
    readonly proxyOptions: Readonly<DevtoolsProxyOptions>;
    private readonly url;
    private sshClient;
    private connected;
    private connectingPromise?;
    private closed;
    private forwardOut;
    constructor(options: DevtoolsProxyOptions, logger?: ProxyLogEmitter);
    initialize(): Promise<void>;
    connect(req: ClientRequest, connectOpts: AgentConnectOpts): Promise<Duplex>;
    private _connect;
    destroy(): void;
    interruptForTesting(): Promise<void>;
}
//# sourceMappingURL=ssh.d.ts.map