import type { DevtoolsProxyOptions } from './proxy-options';
import type { AgentWithInitialize } from './agent';
import type { Duplex } from 'stream';
import type { ProxyLogEmitter } from './logging';
export interface TunnelOptions {
    proxyHost: string;
    proxyPort: number;
    proxyUsername?: string;
    proxyPassword?: string;
}
export interface Tunnel {
    readonly logger: ProxyLogEmitter;
    on(ev: 'forwardingError', cb: (err: Error) => void): void;
    on(ev: 'error', cb: (err: Error) => void): void;
    listen(): Promise<void>;
    close(): Promise<void>;
    readonly config: Readonly<TunnelOptions>;
}
export declare function connectThroughAgent({ dstAddr, dstPort, agent, overrideProtocol, }: {
    dstAddr: string;
    dstPort: number;
    agent: AgentWithInitialize;
    overrideProtocol?: string | undefined;
}): Promise<Duplex>;
export declare function createSocks5Tunnel(proxyOptions: DevtoolsProxyOptions | AgentWithInitialize, tunnelOptions?: Partial<TunnelOptions> | 'generate-credentials', target?: string | undefined): Tunnel | undefined;
//# sourceMappingURL=socks5.d.ts.map