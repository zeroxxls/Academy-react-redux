"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPotentialTLSCertificateError = exports.isFastFailureConnectionError = void 0;
function isFastFailureConnectionSingleError(error) {
    switch (error.name) {
        case 'MongoNetworkError':
            return /\b(ECONNREFUSED|ENOTFOUND|ENETUNREACH|EINVAL)\b/.test(error.message);
        case 'MongoError':
            return /The apiVersion parameter is required/.test(error.message);
        default:
            return (['ECONNREFUSED', 'ENOTFOUND', 'ENETUNREACH', 'EINVAL'].includes(error.code ?? '') || (0, exports.isPotentialTLSCertificateError)(error));
    }
}
exports.isFastFailureConnectionError = handleNestedErrors(isFastFailureConnectionSingleError);
function isPotentialTLSCertificateSingleError(error) {
    return [
        'UNABLE_TO_GET_ISSUER_CERT',
        'UNABLE_TO_GET_CRL',
        'UNABLE_TO_DECRYPT_CERT_SIGNATURE',
        'UNABLE_TO_DECRYPT_CRL_SIGNATURE',
        'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',
        'CERT_SIGNATURE_FAILURE',
        'CRL_SIGNATURE_FAILURE',
        'CERT_NOT_YET_VALID',
        'CERT_HAS_EXPIRED',
        'CRL_NOT_YET_VALID',
        'CRL_HAS_EXPIRED',
        'ERROR_IN_CERT_NOT_BEFORE_FIELD',
        'ERROR_IN_CERT_NOT_AFTER_FIELD',
        'ERROR_IN_CRL_LAST_UPDATE_FIELD',
        'ERROR_IN_CRL_NEXT_UPDATE_FIELD',
        'OUT_OF_MEM',
        'DEPTH_ZERO_SELF_SIGNED_CERT',
        'SELF_SIGNED_CERT_IN_CHAIN',
        'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',
        'UNABLE_TO_VERIFY_LEAF_SIGNATURE',
        'CERT_CHAIN_TOO_LONG',
        'CERT_REVOKED',
        'INVALID_CA',
        'PATH_LENGTH_EXCEEDED',
        'INVALID_PURPOSE',
        'CERT_UNTRUSTED',
        'CERT_REJECTED',
        'HOSTNAME_MISMATCH',
    ].includes(error.code ?? '');
}
exports.isPotentialTLSCertificateError = handleNestedErrors(isPotentialTLSCertificateSingleError);
function handleNestedErrors(fn) {
    const checker = (err) => {
        if (Object.prototype.toString.call(err).toLowerCase() !== '[object error]') {
            return checker(new Error(String(err)));
        }
        if (!err || typeof err !== 'object')
            return false;
        if ('cause' in err && checker(err.cause)) {
            return true;
        }
        if ('errors' in err &&
            Array.isArray(err.errors) &&
            err.errors.some((err) => checker(err))) {
            return true;
        }
        return fn(err);
    };
    return checker;
}
//# sourceMappingURL=fast-failure-connect.js.map